name: Release (binaries)

on:
  push:
    tags:
      - "v*"

# needed in some orgs to allow creating/updating Releases
permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2

      - name: Install musl tools (only for musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Package
        run: |
          set -euo pipefail
          mkdir -p dist
          BIN=crabture
          TAG="${GITHUB_REF_NAME}"
          TGT="${{ matrix.target }}"
          SRC="target/${TGT}/release/${BIN}"
          TAR="crabture-${TAG}-${TGT}.tar.gz"
          chmod +x "${SRC}"
          # include LICENSE/README next to the binary so theyâ€™re in the tarball
          cp LICENSE README.md "target/${TGT}/release/" || true
          tar -czf "dist/${TAR}" -C "target/${TGT}/release" "${BIN}" LICENSE README.md
          echo "ASSET=dist/${TAR}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.ASSET }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          # put all files directly under ./dist (no subfolders)
          merge-multiple: true

      - name: Gather files
        id: gather
        shell: bash
        run: |
          set -euo pipefail
          ls -la dist
          FILES=$(find dist -type f -name "crabture-*.tar.gz" | paste -sd "," -)
          if [ -z "$FILES" ]; then
            echo "::error ::No release artifacts found in ./dist"
            exit 1
          fi
          echo "files=${FILES}" >> $GITHUB_OUTPUT
          echo "Found: ${FILES}"

      - name: Create/Update Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: "crabture ${{ github.ref_name }}"
          artifacts: "${{ steps.gather.outputs.files }}"
          allowUpdates: true
          generateReleaseNotes: true
